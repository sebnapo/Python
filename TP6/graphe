def isSymetrique(matrice):
    for i in range(matrice[0]):
        for x in range(matrice[i][0]):
            if(matrice[i][x] != matrice[x][i]): return False

    return True

def isOrienteMatrice(graphe):
    if(isSymetrique(graphe.adjacence)): return True
    else : return False

class Graphe :
    def __init__(self,listeSommet,listeArc,isOriented = False):
        self.listeSommet = listeSommet
        self.listeArc = listeArc
        self.isOriented = isOriented

class Arc :
    def __init__(self,owner,destination,weight):
        self.owner = owner
        self.destination = destination
        self.weigth = weight

class Sommet :
    def __init__(self,val):
        self.val = val

def isOrienteListes(graphe):
    matriceAjd = [len(graphe.listeSommet)][len(graphe.listeSommet)]
    for i range(len(graphe.listeSommet)):
        for z in range(len(graphe.listeSommet)):
            matriceAjd[i,z] = 0
            if(graphe.isOriented):
                for arc in graphe.listeArc:
                    matriceAjd[arc.owner][arc.destin] = 1